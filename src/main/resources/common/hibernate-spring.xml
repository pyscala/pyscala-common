<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:/db-config.properties" ignore-unresolvable="true"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbcUrl}" />
        <property name="username" value="${jdbcUser}" />
        <property name="password" value="${jdbcPassword}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5" />
        <property name="minIdle" value="2" />
        <property name="maxActive" value="${dbMaxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT now() from dual" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <!--  <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->
        <!-- 配置监控统计拦截的filters,wall-sql攻击 -->
        <property name="filters" value="mergeStat,wall" />
        <!-- 慢查询slowSqlMillis的缺省值为3000，也就是3秒 -->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" />
        <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>

    <!--<bean id="dynamicDataSource" class="com.update.common.util.DynamicDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                <!--<entry value-ref="jdDataSource" key="jdDataSource" ></entry>-->
                <!--<entry value-ref="dataSource" key="dataSource"></entry>-->
                <!--<entry value-ref="metaDataSource" key="metaDataSource"></entry>-->
                <!--<entry value-ref="update" key="update"></entry>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="defaultTargetDataSource" ref="dataSource">-->
        <!--</property>-->
    <!--</bean>-->
    <!--配置session工厂-->
    <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--<property name="packagesToScan" value="com.learner.entity" />-->
        <!--<property name="hibernateProperties">-->
            <!--<props>-->
                <!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> &lt;!&ndash;hibernate根据实体自动生成数据库表&ndash;&gt;-->
                <!--<prop key="hibernate.dialect">${hibernate.dialect}</prop>   &lt;!&ndash;指定数据库方言&ndash;&gt;-->
                <!--<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>     &lt;!&ndash;在控制台显示执行的数据库操作语句&ndash;&gt;-->
                <!--<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>     &lt;!&ndash;在控制台显示执行的数据哭操作语句（格式）&ndash;&gt;-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="default"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.learner.entity"/>

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true"/>
                <property name="generateDdl" value="true"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect"/>
            </bean>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="dataSource" ref="dataSource"/>
        <qualifier value="transactionManager"
                   type="org.springframework.beans.factory.annotation.Qualifier"/>
    </bean>
    <!--&lt;!&ndash; 配置事务增强处理Bean，指定事务管理器 &ndash;&gt;
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        &lt;!&ndash; 配置详细事务处理语义 &ndash;&gt;
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="load*" propagation="SUPPORTS" read-only="true" />
            &lt;!&ndash; 其他采用默认事务方式 &ndash;&gt;
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    &lt;!&ndash; Spring aop事务管理 &ndash;&gt;
    <aop:config>
        &lt;!&ndash; 配置切入点 &ndash;&gt;
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* com.learner.service..*Impl.*(..))" />
        &lt;!&ndash; 指定在txAdvice切入点应用txAdvice事务增强处理 &ndash;&gt;
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice" />
    </aop:config>-->
    <bean id="persistenceAnnotation" class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>
